# Generated by Django 3.2.7 on 2021-09-27 10:55

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('photoProfile', models.FileField(blank=True, null=True, upload_to='images/profiles/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpeg', 'jpg', 'tiff'])])),
                ('tel1', models.CharField(blank=True, max_length=10, null=True)),
                ('tel2', models.CharField(blank=True, max_length=10, null=True)),
                ('entreprise', models.CharField(blank=True, max_length=20, null=True)),
                ('adresse', models.CharField(blank=True, max_length=500, null=True)),
                ('ICE', models.CharField(blank=True, max_length=15, null=True)),
                ('domaineActivite', models.CharField(blank=True, choices=[('Autre', 'Autre'), ('SG_AM', 'Société de gestion / Asset management'), ('B_L', 'Banque / Leasing'), ('P_D', 'Promoteur / Développeur'), ('TI', 'Transaction en immobilier'), ('C_EI', 'Conseil / Expertise en immobilier')], max_length=25, null=True)),
                ('userType', models.CharField(choices=[('principal', 'principal'), ('secondaire', 'secondaire')], default='principal', max_length=100)),
                ('lien', models.IntegerField(blank=True, null=True)),
                ('credit_journalier', models.IntegerField(blank=True, default=30, null=True)),
                ('credit_monsuel', models.IntegerField(blank=True, default=300, null=True)),
                ('type_map', models.CharField(blank=True, choices=[('Leaflet', 'Leaflet'), ('Google', 'Google')], default='Leaflet', max_length=20, null=True)),
                ('key_map', models.CharField(blank=True, max_length=50, null=True)),
                ('permission', models.CharField(blank=True, choices=[('elaborateur', 'elaborateur'), ('visiteur', 'visiteur'), ('validateur', 'validateur')], max_length=25, null=True)),
                ('my_ip', models.CharField(blank=True, default='127.0.0.1', max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Credit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credit_journalier', models.IntegerField(null=True)),
                ('credit_monsuel', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'User_credit',
            },
        ),
        migrations.CreateModel(
            name='Facture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero', models.IntegerField(blank=True, null=True)),
                ('statut', models.CharField(blank=True, choices=[('EnAttente', 'En attente'), ('Paye', 'Payé'), ('Annule', 'Annulé')], max_length=100, null=True)),
                ('region_choisis', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=3, null=True), blank=True, null=True, size=None)),
                ('nbrUtilisateur', models.IntegerField(blank=True, null=True)),
                ('montant_HT', models.FloatField(blank=True, null=True)),
                ('date_de_facturation', models.DateField(blank=True, null=True)),
                ('date_expiration', models.DateField(blank=True, null=True)),
                ('fichier_pdf_genere', models.FileField(blank=True, null=True, upload_to='factures/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])])),
                ('fichier_pdf_justif', models.FileField(blank=True, null=True, upload_to='factures/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])])),
                ('type_abonnement', models.IntegerField(blank=True, choices=[(0, 'Standard'), (1, 'Premium'), (2, 'premium +')], default=0, null=True)),
                ('is_pack_base', models.BooleanField(default=False)),
                ('username', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'User_facture',
            },
        ),
    ]
